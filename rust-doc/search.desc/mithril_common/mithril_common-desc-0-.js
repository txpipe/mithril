searchState.loadedDescShard("mithril_common", 0, "Shared datatypes and traits used by Mithril rust projects\nContains the error value\nMithril API protocol version header name\nMithril Signer node version header name\nA TickerService using a ChainObserver and a …\nContains the success value\nGeneric error type\nGeneric result type\nTickerService\nAPI Version provider service\nCompare two json strings ignoring keys order\nThe module used for parsing Cardano transactions\nCardano Transaction Preloader\nTools to retrieve, validate the Certificate Chain created …\nTools to request metadata, like the current epoch or the …\nTools to read chain blocks sequentially\nTools and types to abstract the use of the Mithril STM …\nTools to compute mithril digest from a Cardano node …\nThe entities used by, and exchanged between, the …\nThe module used for handling eras\nMacro used to mark the code that should be cleaned up when …\nReturns the argument unchanged.\nGet the current Epoch of the cardano node.\nGet the current Epoch of the cardano node.\nGet the current TimePoint of the cardano node.\nCalls <code>U::from(self)</code>.\nMessages module This module aims at providing shared …\nMithrilTickerService factory.\nProtocol module\nResource pool implementation\nThe module used for building signables\nSigned Entity Type Lock\nTest utilities\nAPI Version provider\nOpen API file name\nCompute all the sorted list of all versions\nCompute the current api version\nCompute the current api version requirement\nReturns the argument unchanged.\nBuild Open API versions mapping\nCalls <code>U::from(self)</code>.\nVersion provider factory\nUpdate open api versions. Test only\nA scanner that can read cardano transactions in a cardano …\nTrait that define how blocks are streamed from a Cardano …\nTests extensions methods for the BlockStreamer trait.\nCardano block scanner\nBlock streamer that streams blocks with a Chain block …\nChainScannedBlocks allows to scan new blocks and handle …\nDumb block scanner\nDumb block streamer\nRoll backward on the chain to the previous SlotNumber\nRoll forward on the chain to the next list of ScannedBlock\nA block scanned from a Cardano database\nAdd to the inner streamer a …\nAdd to the inner streamer several …\nAdd to the inner streamer a …\nBlock hash\nBlock number\nAdd to the inner streamer several …\nAdd to the streamer several …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the scanned block into a list of Cardano …\nFactory\nFactory\nFactory - the resulting streamer can be polled one time …\nScanned block factory\nStream all the available blocks, may be very memory …\nStream the next available blocks\nAdd to the streamer a ChainScannedBlocks::RollBackward …\nScan the transactions\nSlot number of the block\nHashes of the transactions in the block\nNumber of transactions in the block\nFactory\nPreload mechanism for Cardano Transaction signed entity, …\nCardanoTransactionsPreloaderActivation\nCardanoTransactionsPreloaderChecker gives the ability to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine if the Cardano Transactions Preloader should …\nReturn the activation state of the preloader.\nCreate a new instance of …\nCreate a new instance of <code>CardanoTransactionPreloader</code>.\nPreload the Cardano Transactions by running the importer …\nError raised when validating the certificate chain if the …\nError raised when validating the certificate chain if the …\nError raised when validating the certificate chain if a …\nError raised when the Genesis Signature stored in a …\nCertificateGenesisProducer is in charge of producing a …\nError raised when the hash stored in a Certificate doesn’…\nCertificateRetriever is in charge of retrieving a …\nCertificateRetriever related errors.\nCertificateVerifier is the cryptographic engine in charge …\nCertificateVerifier related errors.\nError raised when …\nMithrilCertificateVerifier is an implementation of the …\nError raised when the multi signatures verification fails.\nCreate a Genesis Certificate\nCreate the Genesis protocol message\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet Certificate details\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMithrilCertificateVerifier factory\nCertificateGenesisProducer factory\nSign the Genesis protocol message (test only)\nVerify if a Certificate is valid and returns the previous …\nVerify a certificate\nVerify that the Certificate Chain associated to a …\nVerify that the Certificate Chain associated to a …\nVerify Genesis certificate\nVerify Genesis certificate\nstill a dirty hack to mock the protocol message verify …\nstill a dirty hack to mock the protocol message verify …\nError raised when building the tx datum failed.\nBytes datum field value.\nBytes datum field value.\nCardano Cli chain observer.\nA ChainObserver pulling it’s data using a …\nA runner able to request data from a Cardano node using the\nChainAddress represents an on chain address.\nRetrieve data from the cardano network\nChain observer builder\nChainObserver related errors.\nType of chain observers available\n<code>CliRunner</code> trait defines the asynchronous methods for …\nFake chain observer.\nA Fake ChainObserver for testing purpose using fixed data.\nGeneric ChainObserver error.\nInteger datum field value\nInteger datum field value\nError raised when the content could not be parsed.\nError raised when the content could not be parsed.\nPallas chain observer.\nA runner that uses Pallas library to interact with a …\nTxDatum represents transaction Datum.\nTxDatumBuilder is a TxDatum builder utility.\nTxDatum related errors.\nAuto-generated discriminant enum variants\nTxDatumFieldValue represents a field value of TxDatum.\nAdd a field to the builder\nBuild a TxDatum\nCreate chain observer\nA TimePoint, used by get_current_epoch\nA list of TxDatum, used by get_current_datums\nDecrease the block number of the current_time_point by the …\nDecrease the slot number of the current_time_point by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the current chain point of the Cardano network\nRetrieve the datums associated to an address\nRetrieve the current epoch of the Cardano network\nRetrieve the KES period of an operational certificate\nRetrieve the KES period of an operational certificate\nRetrieve the current stake distribution of the Cardano …\nRetrieves the fields of the datum with given type\nRetrieves the nth field of the datum with given type\nIncrease the block number of the current_time_point by the …\nIncrease the slot number of the current_time_point by the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLaunches the chain point.\nLaunches the epoch info.\nLaunches the kes period.\nLaunches the stake distribution.\nLaunches the stake snapshot.\nLaunches the stake snapshot for all pools.\nLaunches a UTxO.\nTxDatumBuilder factory\nChain observer builder factory\nCardanoCliChainObserver factory\nCreates a new PallasObserver\nCardanoCliRunner factory\nFakeObserver factory\nIncrease by one the epoch of the current_time_point.\nSet the time point\nSet the datums that will use to compute the result of …\nSet the signers that will use to compute the result of …\nA list of SignerWithStake, used for …\nThe action that indicates what to do next when scanning …\nThe trait that reads events to either:\nFakeChainReader is a fake implementation of …\nPallasChainReader reads blocks with ‘chainsync’ …\nRollBackward event (we are on an incorrect fork, we need …\nRollForward event (we are still on the correct fork)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the next chain block\nTotal remaining next actions\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new FakeChainReader instance.\nCreates a new <code>PallasChainReader</code> with the specified socket …\nSets the chain point\nThe parsed chain block\nThe rollback slot number in the chain to read (as a new …\nAlias for a byte\nError raised when the encoding or decoding fails\nError raised when a core registration error occurs\nError raised when a core registration error occurs\nThe description of the Cardano key\nA cryptographic signer that is responsible for signing the …\nAn era markers verifier that checks the authenticity of …\nEraMarkersSigner and EraMarkersVerifier related errors.\nWrapper of Ed25519:SigningKey.\nWrapper of Ed25519:Signature.\nWrapper of Ed25519:PublicKey.\nThe KES period that is used to check if the KES keys is …\nPeriod of key file does not match with period provided by …\nPeriod of key file does not match with period provided by …\nError raised when a KES Period is needed but not provided\nError raised when a KES Period is needed but not provided\nError raised when a KES Signature verification fails\nError raised when a KES Signature verification fails\nError raised when a KES Signature is needed but not …\nError raised when a KES Signature is needed but not …\nError raised when a KES update error occurs\nError raised when a KES update error occurs\nA map, where the keys and values are merkelized and …\nThe trait implemented by the keys of a MKMap\nA merkelized map node that is used to represent multi …\nA MKMapProof that proves membership of an entry in the …\nThe trait implemented by the values of a MKMap\nA Merkle proof\nA Merkle tree\nThe Merkle tree leaves indexer trait\nAlias for a Merkle tree leaf position\nA node of a Merkle tree\nA Merkle tree store in memory\nThe Merkle tree storer trait\nA Merkle map\nNot enough signatures were collected, got this many …\nParsed Operational Certificate\nError raised when an operational certificate is invalid\nError raised when an operational certificate is invalid\nError raised when the operational certificate is missing\nError raised when the operational certificate is missing\nThe current protocol version\nError raised when a party id is needed but not provided\nError raised when a party id is needed but not provided\nError raised when a party id is not available in the …\nError raised when a party id is not available in the …\nError raised when a pool address encoding fails\nError raised when a pool address encoding fails\nWrapper of MithrilStm:StmAggrVerificationKey.\nAlias of MithrilStm:AggregationError.\nAlias of MithrilStm:StmClerk.\nAlias of a wrapper of MithrilStm:ClosedKeyReg.\nProtocolGenesisSigner and ProtocolGenesisVerifier related …\nWrapper of Ed25519:SigningKey.\nWrapper of Ed25519:Signature.\nA protocol Genesis Signer that is responsible for signing …\nWrapper of Ed25519:PublicKey.\nA protocol Genesis Verifier that is responsible for …\nAlias of a wrapper of MithrilStm:StmInitializer.\nError raised when the underlying protocol initializer fails\nError raised when the underlying protocol initializer fails\nAlias of a wrapper of …\nNew initializer error\nA ProtocolKey is a wrapped that add Serialization …\nThe codec used to serialize/deserialize a ProtocolKey.\nAlias of a wrapper of MithrilStm:KeyReg.\nAlias of MithrilStm::Index.\nWrapper of MKProof to add serialization utilities.\nWrapper of MithrilStm:StmAggrSig to add serialization …\nWrapper of OpCert to add serialization utilities.\nAlias of MithrilStm::StmParameters.\nThe id of a mithril party.\nAlias of a wrapper of …\nNew registration error\nAlias of MithrilStm:StmSigner.\nWrapper of MithrilStm:StmVerificationKeyPoP to add …\nWrapper of KES:Sum6KesSig to add serialization utilities.\nWrapper of MithrilStm:StmSig to add serialization …\nAlias of MithrilStm:Stake.\nA list of Party Id associated with its Stake.\nA protocol version\nTrait that allows any structure that implements Serialize …\nError raised when a Signature verification fail\nWe need to create this struct because the design of …\nThe type of Cardano key\nA full Merkle tree\nA Merkle tree node\nThis error happens when we try to convert a u64 to a usize …\nAppend elements at the given position\nAppend leaves to the Merkle tree\nTry to create a new instance of the storer\nCan the merkelized map value compute a proof\nCompress the merkelized map\nCompute the hash of an OpCert\nCompute the proof for a set of values of the merkelized map\nGet the proof for a set of values of the merkelized map …\nGenerate Merkle proof of memberships in the tree\nCompute protocol party id as pool id bech 32\nCompute protocol party id as hash\nGet the root of the merkelized map value\nGet the root of the merkle tree of the merkelized map\nGenerate root of the Merkle tree\nGet the root of the merkelized map proof\nCheck if the merkelized map value contains a leaf\nCheck if the merkelized map contains a leaf (and returns …\nCheck if the Merkle tree contains the given leaf\nCheck if the merkelized map proof contains a leaf\nCheck if the proof contains the given leaves\nCheck if the Merkle tree contains the given leaf\nCheck if the Merkle tree contains the given leaf\nProtocolGenesisSigner deterministic\nEraMarkersSigner deterministic\nCreate a ProtocolGenesisVerifier\nProtocolGenesisSigner non deterministic\nEraMarkersSigner non deterministic\nProtocolGenesisSigner factory\nEraMarkersSigner factory\nCreate a EraMarkersVerifier\nDo the decoding of the given key\nDo the decoding of the given key\nEncode to bech32 given Human Readable Part (hrp) and data\nDo the encoding of the given key\nDo the encoding of the given key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an instance from a bytes representation\nCreate an instance from a bytes representation\nCreate an instance from a bytes hex representation\nCreate an instance from a bytes hex representation\nDeserialize a type <code>T: Serialize + DeserializeOwned</code> from …\nDeserialize a type <code>T: Serialize + DeserializeOwned</code> from …\nDeserialize a Cardano key from file. Cardano KES key …\nCreate a MKTreeNode from a hex representation\nCreate an instance from a JSON hex representation\nBuild a MKProof based on the given leaves (<em>Test only</em>).\nEraMarkersSigner from EraMarkersVerifierSecretKey\nProtocolGenesisSigner from ProtocolGenesisSecretKey\nBuild a MKProof based on the given leaves (<em>Test only</em>).\nEraMarkersVerifier from EraMarkersVerifierVerificationKey\nProtocolGenesisVerifier from ProtocolGenesisVerificationKey\nGet the value of the merkelized map for a given key\nGet the element at the given position\nGet the position of the leaf in the Merkle tree\nInsert a new key-value pair Important: keys must be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the merkelized map is empty\nGet an iterator for the key and values of the merkelized …\nQuorum parameter.\nDecode key from hex helper\nEncode key to hex helper\nCreate a bytes hash representation of the given key\nCreate a bytes hash representation of the given key\nCreate a JSON hash representation of the given key\nList of leaves with their positions in the Merkle tree\nList of leaves with their positions in the Merkle tree\nList the leaves of the merkelized map proof\nList the leaves of the proof\nGet the length of the merkelized map\nSecurity parameter, upper bound on indices.\nUnique public key out of the key registration instance.\nMKMap factory\nMKTree factory\nOpCert factory / test only\nCodecError factory.\nMKMapProof factory\nMKTreeNode factory\nCreate a ProtocolKey from the given key\nMKMap factory\n<code>f</code> in phi(w) = 1 - (1 - f)^w, where w is the stake of a …\nOrdered list of registered parties.\nReplace the value of an existing key\nReturn a reference to its merkle root.\nGet the position of the leaf in the Merkle tree\nSigns a message and returns a EraMarkersVerifierSignature\nSigns a message and returns a ProtocolGenesisSignature\nKES period at which KES key is initalized\nTest data builders for Mithril STM types, for testing …\nCreate a bytes hash representation of the key\nCreate a bytes hash representation of the key\nSerialize a type <code>T: Serialize + DeserializeOwned</code> to file …\nSerialize a type <code>T: Serialize + DeserializeOwned</code> to file …\nCreate a hex representation of the MKTreeNode\nCreate a JSON hash representation of the key\nEraMarkersVerifier to EraMarkersVerifierVerificationKey\nProtocolGenesisVerifier to ProtocolGenesisVerificationKey\nNumber of leaves in the Merkle tree\nNumber of leaves in the Merkle tree\nTotal stake of the registered parties.\nValidate a certificate\nVerifies the genesis signature of a message\nVerifies the signature of a message\nVerifies the genesis signature of a message\nVerify the merkelized map proof\nVerification of a Merkle proof\nVerifies the genesis signature of a message\nInstantiate a certificate chain, use this for tests only.\nInstantiate a Genesis Signer and its associated Verifier\nInstantiate a ProtocolMessage using fake data, use this …\nInstantiate a ProtocolParameters, use this for tests only.\nInstantiate a list of protocol signers based on the given …\nCreate or retrieve a temporary directory for storing …\nA digester working directly on a Cardano DB immutables …\nError raised when the digest computation failed.\nA ImmutableDigester returning configurable result for …\nAn ImmutableFileObserver yielding fixed results for tests …\nA dummy cardano immutable db.\nA DummyImmutableDb builder.\nRaised when the immutable file filename extraction fails.\nRaised when the immutable file number parsing, from the …\nRaised when the immutable file stem extraction fails.\nA digester than can compute the digest used for mithril …\nImmutableDigester related Errors.\nRepresent an immutable file in a Cardano node database …\nRaised when ImmutableFile::new fails.\nImmutableFile::new related errors.\nRaised when immutable file listing fails.\nImmutableFile::list_completed_in_dir related errors.\nRetrieve data on ImmutableFile from a cardano database.\nImmutableFileObserver related errors.\nAn ImmutableFileObserver using the filesystem.\nError raised when the files listing failed.\nRaised when the metadata of a file could not be read.\nRaised when the no immutables files were available.\nRaised when the “immutable” folder could not be found …\nError raised when there’s less than the required number …\nAdd an immutable chunk file and its primary &amp; secondary to …\nMakes build add another trio of immutables file, that won…\nBuild a DummyImmutableDb.\nCache provider to accelerate …\nCompute the digest\nCompute the hash of this immutable file.\nThe dummy cardano db directory path.\nThe filename\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the ImmutableFileNumber of the last immutable file in …\nThe immutables files in the dummy cardano db.\nIncrease by one the stored immutable file number, return …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the file number of the last immutable\nList all <code>ImmutableFile</code> in a given directory.\nImmutableDigester factory\nDumbDigester factory\nImmutableFileSystemObserver factory.\nDumbImmutableFileObserver factory.\nImmutableFile factory\nDummyImmutablesDbBuilder factory, will create a folder …\nFiles that doesn’t follow the immutable file name scheme …\nThe immutable file number\nThe path to the immutable file\nSet the size of all files written by build to the given …\nUpdate the stored immutable file number.\nThe ImmutableFileNumber that shall be returned by …\nUpdate digest returned by compute_digest\nSet the immutables file number that will be used to …\nSet filenames to write to the db that doesn’t follow the …\nA cardano node DB directory\nExpected last ImmutableFileNumber.\nLast ImmutableFileNumber found when listing ImmutableFiles.\nPath for which file stem extraction failed.\nPath for which filename extraction failed.\nA specialized result type for …\nContains the error value\nError raised by ImmutableFileDigestCacheProvider::get.\nImmutableFileDigestCacheProvider::get related errors.\nImmutableFileDigestCacheProvider related errors.\nImmutableFileDigestCacheProvider::store related errors.\nA cache provider that store individual ImmutableFile …\nRaised when an IO error is raised when getting a cache.\nRaised when an IO error is raised when storing a cache.\nRaised when json cache deserialization fails.\nA in memory ImmutableFileDigestCacheProvider.\nA JsonImmutableFileDigestCacheProvider builder.\nRaised when json cache serialization fails.\nA in memory ImmutableFileDigestCacheProvider.\nContains the success value\nError raised by ImmutableFileDigestCacheProvider::store.\nBuild a JsonImmutableFileDigestCacheProvider based on the …\nIf set will create the cache directory if it doesn’t …\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a new MemoryImmutableFileDigestCacheProvider that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAssociate each given immutable files with a cached value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJsonImmutableFileDigestCacheProvider factory\nJsonImmutableFileDigestCacheProviderBuilder factory.\nReset the stored values\nSet if existing cached values in the provider must be …\nStore the given digests\nSet the Logger to use.\nHash of a Cardano Block\nBlockNumber is the block number of a Cardano transaction.\nBlockRange for the Cardano chain\nBlockRangeLength is the length of a block range.\nA continuous iterable sequence of block ranges.\nThe epoch offset used to retrieve the epoch at the end of …\nA point in the Cardano chain at which a Mithril …\nFull Cardano Immutable Files\nFull Cardano Immutable Files\nThe Cardano Network that is being targeted\nCardano Stake Distribution\nCardano Stake Distribution\nCardano Stake Distribution\nThe ProtocolMessage part key associated to the epoch for …\nThe ProtocolMessage part key associated to the Cardano …\nCardano transaction representation\nCardano Transactions\nCardano Transactions\nThe ProtocolMessage part key associated to the Cardano …\nA cryptographic proof of a set of Cardano transactions is …\nConfiguration for the signing of Cardano transactions\nSnapshot of a set of Cardano transactions\nCertificate represents a Mithril certificate embedding a …\nCertificateMetadata represents the metadata associated to …\nCertificatePending represents a pending certificate in the …\nThe signature of a Certificate\nThe Cardano chain point which is used to identify a …\nRepresentation of a Client Error raised by an http server\nCompression algorithm for the snapshot archive artifacts.\nDefault allowed discriminants\nA Cardano private devnet\nEpoch represents a Cardano epoch\nEpochError is an error triggered by an Epoch\nError raised when the computation of an epoch using an …\nEpochSettings represents the settings of an epoch\nGenesis signature created from the original stake …\nGzip compression format\nHex encoded Aggregate Verification Key\nHex encoded Sha256 Digest\nHex encoded Era Markers Secret Key\nHex encoded Genesis Secret Key\nHex encoded Genesis Verification Key\nHex encoded key\nHex encoded key slice\nHex encoded Operational Certificate\nHex encoded Single Signature\nHex encoded Verification Key\nHex encoded Verification Key Signature\nImmutableFileName represents the filename, with extension, …\nImmutableFileNumber represents the id of immutable files …\nThe length of the block range Important: this value should …\nThe ProtocolMessage part key associated to the latest …\nLotteryIndex represents the index of a Mithril single …\nCardano Network magic identifier\nThe Cardano mainnet network\nMithril Stake Distribution\nMithril stake distribution\nMithril stake distribution\nSTM multi signature created from a quorum of single …\nThe epoch offset used to retrieve the signers stake …\nThe ProtocolMessage part key associated to the Next epoch …\nThe epoch offset used for aggregator protocol parameters …\nPartyId represents a signing party in Mithril protocol\nProtocolMessage represents a message that is signed (or …\nThe key of a ProtocolMessage\nThe value of a ProtocolMessage\nProtocol cryptographic parameters\nProtocol version\nThe epoch offset used for signers stake distribution and …\nThe epoch offset used for signers stake distribution and …\nThe epoch offset used to retrieve, given the epoch at …\nRepresentation of a Server Error raised by a http server\nAggregate for signed entity\nConvert TimePoint to SignedEntityType and list allowed …\nThe signed entity type that represents a type of data …\nAuto-generated discriminant enum variants\nAn iterator over the variants of …\nSigner represents a signing participant in the network\nSigner represents a signing party in the network …\nSingleSignatures represent single signatures originating …\nCardano Slot number\nSnapshot represents a snapshot file and its metadata\nThe ProtocolMessage part key associated to the Snapshot …\nStake represents the stakes of a participant in the …\nStakeDistribution represents the stakes of multiple …\nThis represents a stakeholder.\nA Cardano test network (testnet, preview, or preprod)\nTimePoint aggregates all types of point in the Cardano …\nTransactionHash is the unique identifier of a cardano …\nZstandard compression format\nAggregate verification key The AVK used to sign during the …\nGet all the discriminants\nGet all BlockRange strictly contained in the given interval\nList of discriminants that the node is allowed to sign\nArtifact\nDeduce a CardanoDbBeacon from this certificate values.\nMithril beacon on the Cardano chain\nThe hex encoded block hash\nBlock hash of the transaction\nThe block number\nBlock number of the transaction\nBeacon of the Cardano transactions set\nVersion of the Cardano node used to create snapshot …\nCardano transactions signing configuration\nCertificate id for this signed entity.\nChain point\nReturns the code (magic) of the network\nCompression algorithm of the snapshot archive\nDetermines whether unparsable blocks should be allowed …\nCompute the block number to be signed based on the chain …\nComputes the hash of a CardanoDbBeacon\nComputes the hash of a Certificate\nAs a sub structure of certificate, Party must be hashable.\nComputes the hash of the certificate metadata\nComputes the hash of the protocol message\nComputes the hash of ProtocolParameters\nComputes the hash of Signer\nComputes the hash of SignerWithStake\nReturns <code>true</code> if range is contained in the sequence.\nDate and time when the signed_entity was created\nDigest that is signed by the signer participants\nCreate a dummy ChainPoint\nRetrieve a dummy proof (for test only)\nCreate a dummy SignedEntity for Snapshot entity\nCreate a dummy SignedEntity for CardanoStakeDistribution …\nCreate a dummy SignedEntity for MithrilStakeDistribution …\nCreate a dummy SignedEntity for CardanoTransactionsSnapshot…\nCreate a dummy SignedEntityConfig\nCreate a dummy config\nRetrieve a dummy entity type (for test only)\nCreate a dummy TimePoint\nValue used as a placeholder where a beacon is necessary\nReturns the end of the block ranges sequence.\nCardano chain epoch number\nEpoch at which the Cardano Stake Distribution is computed\nCardano chain epoch number\nCurrent Epoch\nCurrent Epoch\nEpoch at which the Mithril Stake Distribution is created\nCardano chain epoch number\nThose ratio will be multiplied by the snapshot size to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a BlockRange from a block number\nInstantiates a CardanoNetwork from its code and magic id\nGet the discriminant associated with the given id\nHelper to create a proof from a list of leaves\nTurn a Signer into a SignerWithStake.\nTransform a list of signers into a list of `…\nCreate a new signed entity type for a genesis certificate …\nReturn the epoch from the signed entity.\nReturn the epoch at which the signed entity type is signed.\nReturn a JSON serialized value of the internal beacon\nGet the message part associated with a key\nReturn the associated open message timeout\nget a signer from the certificate pending if it has …\nDeduce the stake distribution from the metadata signers\nCheck if there is a gap with another Epoch.\nUnique hash of the Cardano Stake Distribution\nHash of the Cardano transactions set\nHash of the current certificate Computed from the other …\nHash of the Mithril Stake Distribution (different from the …\nNumber of the last included immutable files for the digest …\nNumber of the last included immutable files for the digest …\nNumber of the last immutable files used for the digest …\nGet the database value from enum’s instance\nGet the database value from enum’s instance\nDate and time when the certificate was initiated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> into a new Vec\nReturn true if the certificate is chaining into itself …\nReturns <code>true</code> if the block ranges sequence contains no …\nTell if the certificate is a genesis certificate\nCheck if origin chain point\nQuorum parameter\nThe kes period used to compute the verification key …\nThe kes period used to compute the verification key …\nerror label\nList all the available algorithms.\nCreate the deduplicated list of allowed signed entity …\nCreate the deduplicated list of allowed signed entity …\nLocations where the binary content of the snapshot can be …\nSecurity parameter (number of lotteries)\nCheck that the certificate signed message match the given …\nReturn the hex encoded merkle root of this proof\nMerkle root of the Cardano transactions set\nerror message\nerror message\nMap of the messages combined into the digest aka MSG(p,n)\nCertificate metadata aka METADATA(p,n)\nCardano network\nCardano network\nCardano network\nBlockRange factory\nBuild the BlockRangesSequence strictly contained in the …\nChainPoint factory\nCardanoDbBeacon factory\nConstructor\nCardanoTransaction factory\nCardanoTransactionsSetProof factory\nCreates a new CardanoTransactionsSnapshot\nCertificate factory\nCertificateMetadata factory\nCertificatePending factory\nInternalServerError factory\nClientError factory\nMithrilStakeDistribution artifact factory\nProtocolMessage factory\nProtocolParameters factory\nSigner factory\nSignerWithStake factory\n<code>SingleSignatures</code> factory\nSnapshot factory\nTimePoint factory\n<code>SingleSignatures</code> factory including the signed message\nComputes the next Epoch\nNext Protocol parameters\nNext Protocol parameters\nSigners that will be able to sign on the next epoch\nComputes a new Epoch by applying an epoch offset.\nApply the cardano stake distribution snapshot epoch offset …\nApply the next signer retrieval offset to this epoch\nApply the protocol parameters recording offset to this …\nApply the recording offset to this epoch\nApply the retrieval offset to this epoch\nApply the signer signing offset to this epoch\nThe encoded operational certificate of stake pool operator …\nThe encoded operational certificate of stake pool operator …\nCreate a new origin chain point\nParse the deduplicated list of signed entity types …\nParty identifier as in the stake distribution\nThe unique identifier of the signer\nThe unique identifier of the signer\nThe unique identifier of the signer\nf in phi(w) = 1 - (1 - f)^w, where w is the stake of a …\nphi_f_fixed is a fixed decimal representation of phi_f …\nComputes the previous Epoch\nHash of the previous certificate in the chain This is …\nStructured message that is used to create the signed …\nProtocol parameters part of METADATA(p,n)\nCurrent Protocol parameters\nCurrent Protocol parameters\nProtocol parameters used to sign this stake distribution\nProtocol Version (semver) Useful to achieve backward …\nDate and time when the certificate was sealed Represents …\nNumber of blocks to discard from the tip of the chain when …\nSet the message part associated with a key Returns …\nCertificate signature\nThe single signature of the digest\nSigned entity id.\nGet the certificate signed entity type.\nSigned entity type\nSigned entity type.\nMessage that is signed by the signers aka H(MSG(p,n) || …\nMessage that is signed by the signer\nThe list of the active signers with their stakes and …\nCurrent Signers\nList of signers with stakes of the Mithril Stake …\nSize of the snapshot file in Bytes\nThe slot number\nSlot number of the transaction\nAmount of stake owned by the party.\nThe signer stake\nStakeDistribution represents the list of participants in …\nGet the start of the block range that contains the given …\nReturns the start of the block ranges sequence.\nThe number of blocks between signature of the transactions.\nGet the extension associated to tar archive using the …\nConvert this time point to a signed entity type based on …\nConvert this SingleSignatures to its corresponding …\nUnique hash of the transaction\nGet the hashes of the transactions certified by this proof\nTry to add two BlockRanges\nConvert the given values to a vec of signers.\nThe public key used to authenticate signer signature\nThe public key used to authenticate signer signature\nThe encoded signer ‘Mithril verification key’ …\nThe encoded signer ‘Mithril verification key’ …\nVerify that transactions set proof is valid\nThe indexes of the won lotteries that lead to the single …\nUnderlying adapter fails to return data.\nData returned from the adapter are inconsistent or …\nEraChecker allows the verification of the current era\nThis is a response from the EraReader. It contains …\nValue object that represents a tag of Era change.\nThe EraReader is responsible of giving the current Era and …\nAdapters are responsible of technically reading the …\nError type when EraReader fails to return a EraEpochToken.\nThe era that the software is running or will run\nAn iterator over the variants of SupportedEra\nThales era\nModule dedicated to EraReaderAdapter implementations.\nChange the current era\nRetrieve the Epoch the checker was the last updated.\nRetrieve the current era\nRetrieve a dummy era (for test only)\nEventual information that advertises the Epoch of …\nRetrieve the list of supported eras\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the epoch the Token has been created at\nReturn the EraMarker of the current Era.\nTry to cast the current EraMarker to a SupportedEra. If it …\nReturn the EraMarker for the coming Era if any.\nTry to cast the next EraMarker to a SupportedEra. If it …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if an era is active\nEra name\nEra checker factory\nInstantiate the EraReader injecting the adapter.\ninstantiate a new EraMarker.\nInstantiate a new EraMarker.\nRead era markers from the underlying adapter.\nThis methods triggers the adapter to read the markers from …\nCurrent Epoch\nEras given by the adapter\nnested underlying adapter error\ncontext message\nBootstrap adapter.\nCardano chain adapter.\nDummy adapter.\nEra markers payload\nEra adapter builder\nType of era reader adapters available\nThe goal of the bootstrap adapter is to advertise for the …\nCardano Chain adapter retrieves era markers on chain\nDummy adapter is intended to be used in a test environment …\nFile adapter is intended to be used in a test environment …\nFile adapter.\nCreate era reader adapter from configuration settings.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecode a EraMarkersPayload from a json hex string\nCreate a new instance directly from markers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of Era markers\nEra reader adapter builder factory\nCardanoChainAdapter factory\nFile adapter factory\nTells what markers should be sent back by the adapter.\nSign an era markers payload\nEra markers signature\nEncode this payload to a json hex string\nVerify the signature an era markers payload\nCapabilities of an Aggregator\nMessage advertised by an Aggregator to inform about its …\nMessage structure of a Cardano Stake Distribution list item\nMessage structure of a Cardano Stake Distribution list\nMessage structure of a Cardano Stake Distribution\nMessage structure of a Cardano Transactions Snapshot list …\nMessage structure of a Cardano Transactions Snapshots list\nMessage structure of a Cardano Transactions snapshot\nA cryptographic proof for a set of Cardano transactions\nCardano transactions prover capabilities\nA cryptographic proof of a set of Cardano transactions is …\nMessage structure of a certificate list item\nCertificateListItemMessage represents the metadata …\nMessage structure of a certificate list\nMessage structure of a certificate\nCertificateMetadata represents the metadata associated to …\nStructure to transport crate::entities::CertificatePending …\nEpochSettings represents the settings of an epoch\nFrom message adapter trait\nThe verification of an individual …\nAn individual CardanoTransactionsSetProofMessagePart could …\nMessage structure of a Mithril Stake Distribution list item\nMessage structure of a Mithril Stake Distribution list\nMessage structure of a Mithril Stake Distribution\nNo certified transactions set proof to verify\nNot all certified transactions set proof have the same …\nMessage structure to register single signature.\nRegister Signer Message\nSigner Message\nSigner with Stake Message\nMessage structure of a snapshot\nMessage structure of a snapshot list item\nMessage structure of a snapshot list\nMessage structure of a snapshot\nTo message adapter trait\nTryFrom message adapter trait\nTryTo message adapter trait\nSet of transactions verified by …\nError encountered or produced by the cardano transaction …\nAdapt entity to message\nAdapt message to entity\nAggregate verification key The AVK used to sign during the …\nAggregate verification key The AVK used to sign during the …\nMithril beacon on the Cardano chain\nMithril beacon on the Cardano chain\nCurrent Beacon\nMithril beacon on the Cardano chain\nMithril beacon on the Cardano chain\nMithril beacon on the Cardano chain\nBlock number of the Cardano transactions snapshot\nBlock number of the Cardano transactions snapshot\nCapabilities of the Aggregator\nCardano node version\nCardano node version\nCardano node version\nCardano transactions prover capabilities\nCardano transactions signing configuration\nHash of the certificate that signs this struct Merkle root.\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHash of the certificate that validate this proof merkle …\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHashes of the certified transactions\nTransactions that have been certified\nCompression algorithm of the snapshot archive\nCompression algorithm of the snapshot archive\nCompression algorithm of the snapshot archive\nDateTime of creation\nDate and time at which the Cardano Stake Distribution was …\nDateTime of creation\nDateTime of creation\nDateTime of creation\nDate and time at which the Mithril Stake Distribution was …\nDate and time at which the snapshot was created\nDate and time at which the snapshot was created\nDigest that is signed by the signer participants\nDigest that is signed by the signer participants\nDigest that is signed by the signer participants\nURL of the documentation\nCreate a dummy AggregatorFeaturesMessage\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nProvide a dummy instance for test.\nDummy instance for test purposes.\nRetrieve a dummy proof (for test only)\nCertificateMetadata factory\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nEpoch at the end of which the Cardano stake distribution …\nEpoch at the end of which the Cardano stake distribution …\nEpoch of the Cardano transactions snapshot\nEpoch of the Cardano transactions snapshot\nEpoch of the Cardano chain\nEpoch of the Cardano chain\nCurrent Epoch\nCurrent Epoch\nEpoch at which the Mithril Stake Distribution is created\nEpoch at which the Mithril Stake Distribution is created\nEpoch at which registration is sent #[…\nFill the given ProtocolMessage with the data associated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a set of signers into message parts\nGenesis signature created from the original stake …\nHash of the Cardano Stake Distribution\nHash of the Cardano Stake Distribution\nHash of the Cardano Transactions snapshot\nHash of the Cardano Transactions snapshot\nHash of the current certificate Computed from the other …\nHash of the current certificate Computed from the other …\nHash of the Mithril Stake Distribution (different from the …\nHash of the Mithril Stake Distribution (different from the …\nDate and time when the certificate was initiated …\nDate and time when the certificate was initiated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe KES period used to compute the verification key …\nThe KES period used to compute the verification key …\nThe KES period used to compute the verification key …\nLatest block number that has been certified\nLocations where the binary content of the snapshot can be …\nLocations where the binary content of the snapshot can be …\nLocations where the binary content of the snapshot can be …\nCheck that the certificate signed message match the given …\nMaximum number of hashes allowed for a single request\nMerkle root of the Cardano transactions snapshot\nMerkle root of the Cardano transactions snapshot\nCertificate metadata aka METADATA(p,n)\nCertificate metadata aka METADATA(p,n)\nSTM multi signature created from a quorum of single …\nCardano network part of METADATA(p,n)\nCardano network part of METADATA(p,n)\nCreate a new <code>CardanoTransactionsProofsMessage</code>\nNext Protocol parameters\nNext Protocol parameters\nSigners that will be able to sign on the next epoch\nTransactions that could not be certified\nVersion of the OpenAPI specification\nThe encoded operational certificate of stake pool operator …\nThe encoded operational certificate of stake pool operator …\nThe encoded operational certificate of stake pool operator …\nThe unique identifier of the signer\nThe unique identifier of the signer\nThe unique identifier of the signer\nThe unique identifier of the signer\nHash of the previous certificate in the chain This is …\nHash of the previous certificate in the chain This is …\nProof of the transactions\nStructured message that is used to create the signed …\nStructured message that is used to create the signed …\nProtocol parameters part of METADATA(p,n)\nCurrent Protocol parameters\nCurrent Protocol parameters\nProtocol parameters part of METADATA(p,n)\nProtocol parameters used to compute AVK\nProtocol Version (semver) Useful to achieve backward …\nProtocol Version (semver) Useful to achieve backward …\nDate and time when the certificate was sealed Represents …\nDate and time when the certificate was sealed Represents …\nThe single signature of the digest\nThe signed entity type of the message. aka BEACON(p,n)\nThe signed entity type of the message. aka BEACON(p,n)\nSigned entity type\nSigned entity type\nSigned entity types that are signed by the aggregator\nMessage that is signed by the signers aka H(MSG(p,n) || …\nMessage that is signed by the signers aka H(MSG(p,n) || …\nMessage that is signed by the signer\nCurrent Signers\nThe list of the active signers with their stakes and …\nList of signers with stakes of the Mithril Stake …\nSize of the snapshot file in Bytes\nSize of the snapshot file in Bytes\nSize of the snapshot file in Bytes\nThe signer stake\nRepresents the list of participants in the Cardano chain …\nThe number of signers that contributed to the certificate …\nTransactions that have been certified\nHashes of the certified transactions\nAdapt entity to message\nAdapt message to entity\nConvert a set of signer message parts into a set of …\nThe public key used to authenticate signer signature\nThe public key used to authenticate signer signature\nThe public key used to authenticate signer signature\nThe encoded signer ‘Mithril verification key’ …\nThe encoded signer ‘Mithril verification key’ …\nThe encoded signer ‘Mithril verification key’ …\nVerify that all the certified transactions proofs are valid\nThe indexes of the won lotteries that lead to the single …\nError source\nHashes of the invalid transactions\nError raised when the list of signers given to the builder …\nMultiSigner is the cryptographic engine in charge of …\nAllow to build Single Or Multi signers to generate a …\nSignerBuilder specific errors\nThe SingleSigner is the structure responsible for issuing …\nAggregate the given single signatures into a …\nBuild a MultiSigner based on the registered parties\nBuild non deterministic SingleSigner and …\nBuild deterministic SingleSigner and ProtocolInitializer …\nCompute aggregate verification key from stake distribution\nCompute aggregate verification key from stake distribution\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the partyId associated with this Signer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSignerBuilder constructor.\nRestore a SingleSigner based on the registered parties and …\nIssue a single signature for the given message.\nVerify a single signature\nAcquire resource has timed out\nInternal Mutex is poisoned\nReset trait which is implemented by pooled resource items. …\nResource pool implementation (FIFO)\nResourcePool related errors.\nResource pool item which will return the resource to the …\nAcquire a resource from the pool with a timeout\nClear the pool\nCount the resources in the pool\nGet the discriminant of the resource pool item\nGet the discriminant of the resource pool item\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGive back a resource to the pool A resource is given back …\nGive back a resource pool item to the pool If the resource …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new resource pool\nCreate a new resource pool item\nReset the resource\nSet the discriminant of the resource pool item\nSize of the resource pool\nArtifact is a trait for types that represent signed …\nBeacon trait\nBlock Range Merkle roots retriever\nThis structure is responsible of calculating the message …\nA CardanoStakeDistributionSignableBuilder builder\nA CardanoTransactionsSignableBuilder builder\nMithril Signable Builder Service\nA MithrilStakeDistributionSignableBuilder builder\nSignableBuilder is trait for building a protocol message …\nArtifactBuilder Service trait\nStake Distribution Retriever\nCardano transactions importer\nReturns a Merkle map of the block ranges roots up to a …\nReturns a Merkle map of the block ranges roots up to a …\nCompute the Merkle tree of a given StakeDistribution\nCompute a protocol message\nCompute signable from signed entity type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet artifact identifier\nReturns all transactions up to the given beacon\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor\nMithrilSignableBuilderService factory\nConstructor\nConstructor\nRetrieve the StakeDistribution for a given epoch\nReturns a Merkle map of the block ranges roots up to a …\nNon-blocking lock mechanism for signed entity types to …\nCreate a new instance of <code>SignedEntityLock</code> without any …\nList only the unlocked signed entities in the given list.\nReturns the argument unchanged.\nCheck if there are any locked signed entities.\nCalls <code>U::from(self)</code>.\nCheck if a signed entity is locked.\nLock a signed entity.\nCreate a new instance of <code>SignedEntityLock</code> without any …\nRelease a locked signed entity.\nBuilder to easily build transactions with consistent …\nUse a custom stake distribution\nA fixture of Mithril data types.\nA builder of mithril types.\nEach party will have a random stake.\nA signer fixture, containing a signer entity with its …\nMethods that can be used to generate the stake …\nA builder of temp directory for tests purpose.\nMake a stake distribution where all parties will have the …\nTools to helps validate conformity to an OpenAPI …\nAssert that two iterators are equivalent\nCompare two json strings ignoring keys order\nDefine how many blocks we generate in each block_range. If …\nTransform the specified parameters to a MithrilFixture.\nCreate a directory based on the builder configuration in …\nBuild a list of transactions to get the number of block …\nGenerate the path of the temp directory (no IO operation …\nBuild the number of transactions requested.\nGet the stake distribution formated as a cardano-cli …\nCompute the Aggregate Verification Key for this fixture …\nCompute the Aggregate Verification Key for this fixture.\nCompute the party id hash\nCreate on disk a temp directory based on the given module …\nCreate a genesis certificate using the fixture signers for …\nCreate on disk a temp directory based on the given module …\nIf set the generated signers won’t be certified (meaning …\nCompare two iterators ignoring the order\nFake data builders for testing.\nPre hex encoded StmTypes for testing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChange path generation in order to guarantee a path that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the path to this signer kes secret key\nThe path to this signer kes secret key file\nDefine how many transactions we generate in each block.\nCardanoTransactionsBuilder constructor.\nMithrilFixture factory.\n<code>TempDir</code> builder factory\nDecode this signer operational certificate if any\nShortcut to get the party id from the inner signer with …\nA ProtocolSigner.\nGet the fixture protocol parameters.\nA ProtocolSigner.\nGet the fixture protocol stake distribution.\nSet the max len that a short path can have\nSign the given protocol message.\nMake all underlying signers sign the given message, filter …\nA SignerWithStake.\nGet the fixture signers.\nGet the fixture signers.\nGet the fixture signers with stake.\nGet the fixture stake distribution.\nGet certificate metadata signers\nDefine a HttpServer for test that can be configured using …\nDecode this signer verification key certificate\nDecode this signer verification key signature certificate …\nSet the seed used to generated the party ids\nSet the protocol_parameters.\nSet the number of signers that will be generated.\nSet the generation method used to compute the stake …\nThe randomizer seed\nAPISpec helps validate conformity to an OpenAPI …\nSets the content type to specify/check, note that it …\nReturns the argument unchanged.\nAPISpec factory from spec\nGet all spec files\nGet all spec files in the directory\nGet default spec file\nGet spec file for era\nCalls <code>U::from(self)</code>.\nSets the method to specify/check.\nSets the path to specify/check.\nVerify conformity helper of API Specs\nVerify that examples are conform to the type definition.\nFake Beacon\nFake Cardano Stake Distribution\nFake Cardano Stake Distributions\nFake Cardano Transactions\nFake Certificate\nFake CertificatePending\nFake ChainPoint\nFake Digest\nFake EpochSettings\nFake Genesis Certificate\nFake Mithril Stake Distribution\nFake network\nFake ProtocolParameters\nFake Signers\nFake SignersWithStake\nFake SingleSignatures\nFake Snapshots\nFake transaction hashes that have valid length &amp; characters\nA list of pre json hex encoded …\nA list of pre json hex encoded Ed25519:Signature.\nA list of pre json hex encoded ed25519_dalek::VerifyingKey\nA list of pre json hex encoded MithrilStm:StmAggrSig\nA list of pre json hex encoded OpCert\nA list of pre json hex encoded …\nA list of pre json hex encoded KES:Sum6KesSig\nA list of pre json hex encoded MithrilStm:StmSig\nA HTTP server for test\nGet the test server address\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSpawn a TestHttpServer using the given warp filters\nSpawn a TestHttpServer using the given warp filters\nGet the server url")