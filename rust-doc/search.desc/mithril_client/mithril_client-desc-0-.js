searchState.loadedDescShard("mithril_client", 0, "Define all the tooling necessary to manipulate Mithril …\nA Cardano stake distribution. Message structure of a …\nList item of Cardano stake distributions. Message …\nA snapshot that allow to know up to which point of time …\nList item of a Cardano transaction snapshot. Message …\nA cryptographic proof for a set of Cardano transactions\nA cryptographic proof of a set of Cardano transactions is …\nStructure that aggregates the available clients for each …\nBuilder than can be used to create a Client easily or with …\nOptions that can be used to configure the client.\nContains the error value\nThe verification of an individual …\nAn individual CardanoTransactionsSetProofMessagePart could …\nA MessageBuilder can be used to compute the message of …\nA Mithril certificate.\nList item of Mithril certificates\nCertificateListItemMessage represents the metadata …\nCertificateMetadata represents the metadata associated to …\nMithril error type, an alias of anyhow::Error\nMithril result type, an alias of anyhow::Result\nAn individual signer of a Mithril certificate\nA Mithril stake distribution.\nList item of Mithril stake distributions.\nNo certified transactions set proof to verify\nNot all certified transactions set proof have the same …\nContains the success value\nA Mithril snapshot of a Cardano Node database.\nList item of Mithril snapshots\nSet of transactions verified by …\nError encountered or produced by the cardano transaction …\nAdd a feedback receiver to receive events for tasks that …\nAggregate verification key The AVK used to sign during the …\nAggregate verification key The AVK used to sign during the …\nConstructs a new <code>ClientBuilder</code> that fetches data from the …\nMechanisms to exchange data with an Aggregator.\nMithril beacon on the Cardano chain\nMithril beacon on the Cardano chain\nMithril beacon on the Cardano chain\nMithril beacon on the Cardano chain\nBlock number of the Cardano transactions snapshot\nBlock number of the Cardano transactions snapshot\nReturns a <code>Client</code> that uses the dependencies provided to …\nCardano node version\nCardano node version\nGet the client that fetches Cardano stake distributions.\nA client to retrieve Cardano stake distributions data from …\nGet the client that fetches and verifies Mithril Cardano …\nA client to retrieve from an aggregator cryptographic …\nGet the client that fetches and verifies Mithril …\nA client which retrieves and validates certificates from …\nHash of the certificate that signs this struct Merkle root.\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHash of the certificate that validate this proof merkle …\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHashes of the certified transactions\nTransactions that have been certified\n<code>mithril-common</code> re-exports\nCompression algorithm of the snapshot archive\nCompression algorithm of the snapshot archive\nCompute message for a Cardano stake distribution.\nCompute message for a Cardano Transactions Proofs.\nCompute message for a Mithril stake distribution.\nCompute message for a snapshot (based on the directory …\nDateTime of creation\nDate and time at which the Cardano Stake Distribution was …\nDateTime of creation\nDateTime of creation\nDateTime of creation\nDate and time at which the Mithril Stake Distribution was …\nDate and time at which the snapshot was created\nDate and time at which the snapshot was created\nDigest that is signed by the signer participants\nDigest that is signed by the signer participants\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nRetrieve a dummy proof (for test only)\nCertificateMetadata factory\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nReturn a dummy test entity (test-only).\nEpoch at the end of which the Cardano stake distribution …\nEpoch at the end of which the Cardano stake distribution …\nEpoch of the Cardano transactions snapshot\nEpoch of the Cardano transactions snapshot\nEpoch of the Cardano chain\nEpoch of the Cardano chain\nEpoch at which the Mithril Stake Distribution is created\nEpoch at which the Mithril Stake Distribution is created\nLong task feedbacks\nFill the given ProtocolMessage with the data associated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a set of signers into message parts\nGenesis signature created from the original stake …\nHash of the Cardano Stake Distribution\nHash of the Cardano Stake Distribution\nHash of the Cardano Transactions snapshot\nHash of the Cardano Transactions snapshot\nHash of the current certificate Computed from the other …\nHash of the current certificate Computed from the other …\nHash of the Mithril Stake Distribution (different from the …\nHash of the Mithril Stake Distribution (different from the …\nHTTP headers to include in the client requests.\nDate and time when the certificate was initiated …\nDate and time when the certificate was initiated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe KES period used to compute the verification key …\nLatest block number that has been certified\nLocations where the binary content of the snapshot can be …\nLocations where the binary content of the snapshot can be …\nCheck that the certificate signed message match the given …\nMerkle root of the Cardano transactions snapshot\nMerkle root of the Cardano transactions snapshot\nCertificate metadata aka METADATA(p,n)\nCertificate metadata aka METADATA(p,n)\nGet the client that fetches Mithril stake distributions.\nA client to retrieve Mithril stake distributions data from …\nSTM multi signature created from a quorum of single …\nCardano network part of METADATA(p,n)\nCardano network part of METADATA(p,n)\nConstructs a new <code>ClientBuilder</code> without any dependency set.\nConstructs a new <code>MessageBuilder</code>.\nInstantiate a new ClientOptions.\nCreate a new <code>CardanoTransactionsProofsMessage</code>\nTransactions that could not be certified\nThe encoded operational certificate of stake pool operator …\nThe unique identifier of the signer\nHash of the previous certificate in the chain This is …\nHash of the previous certificate in the chain This is …\nProof of the transactions\nStructured message that is used to create the signed …\nStructured message that is used to create the signed …\nProtocol parameters part of METADATA(p,n)\nProtocol parameters part of METADATA(p,n)\nProtocol parameters used to compute AVK\nProtocol Version (semver) Useful to achieve backward …\nProtocol Version (semver) Useful to achieve backward …\nDate and time when the certificate was sealed Represents …\nDate and time when the certificate was sealed Represents …\nThe signed entity type of the message. aka BEACON(p,n)\nThe signed entity type of the message. aka BEACON(p,n)\nMessage that is signed by the signers aka H(MSG(p,n) || …\nMessage that is signed by the signers aka H(MSG(p,n) || …\nThe list of the active signers with their stakes and …\nList of signers with stakes of the Mithril Stake …\nSize of the snapshot file in Bytes\nSize of the snapshot file in Bytes\nGet the client that fetches and downloads Mithril …\nA client to retrieve snapshots data from an Aggregator.\nSnapshot tarball download and unpack mechanism.\nThe signer stake\nRepresents the list of participants in the Cardano chain …\nThe number of signers that contributed to the certificate …\nTransactions that have been certified\nHashes of the certified transactions\nConvert a set of signer message parts into a set of …\nThe public key used to authenticate signer signature\nThe encoded signer ‘Mithril verification key’ …\nVerify that all the certified transactions proofs are valid\nSet the AggregatorClient that will be used to request data …\nSet the CertificateVerifier that will be used to validate …\nSet the ImmutableDigester to be used for the message …\nSet the Logger to use.\nSet the Logger to use.\nSets the options to be used by the client.\nSet the SnapshotDownloader that will be used to download …\nError source\nHashes of the invalid transactions\nAPI that defines a client for the Aggregator\nError tied with the Aggregator client\nResponsible for HTTP transport and API version check.\nWhat can be read from an AggregatorClient.\nError raised when the server API version mismatch the …\nGet a specific Cardano stake distribution from the …\nGet a specific Cardano stake distribution from the …\nGet a specific Cardano transaction snapshot\nGet a specific certificate from the aggregator\nGet a specific Mithril stake distribution from the …\nGet a specific snapshot from the aggregator\nGet proofs that the given set of Cardano transactions is …\nIncrements the aggregator snapshot download statistics\nLists the aggregator Cardano stake distribution\nLists the aggregator Cardano transaction snapshot\nLists the aggregator certificates\nLists the aggregator Mithril stake distribution\nLists the aggregator snapshots\nError raised when querying the aggregator returned a 4XX …\nError raised when querying the aggregator returned a 5XX …\nHTTP subsystem error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the request body to send to the aggregator\nGet the content back from the Aggregator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>AggregatorHTTPClient</code>\nPost information to the Aggregator\nGet the request route relative to the aggregator root …\nDigest of the snapshot to retrieve\nEpoch at the end of which the Cardano stake distribution …\nHash of the certificate to retrieve\nHash of the Mithril stake distribution to retrieve\nHash of the Cardano transaction snapshot to retrieve\nHash of the Cardano stake distribution to retrieve\nSnapshot as HTTP request body\nHashes of the transactions to get proofs for.\nHTTP client for CardanoStakeDistribution API from the …\nReturns the argument unchanged.\nGet the given Cardano stake distribution data by hash.\nGet the given Cardano stake distribution data by epoch.\nCalls <code>U::from(self)</code>.\nFetch a list of signed CardanoStakeDistribution\nConstructs a new <code>CardanoStakeDistribution</code>.\nHTTP client for CardanoTransactionsAPI from the Aggregator\nReturns the argument unchanged.\nGet proofs that the given subset of transactions is …\nGet the given Cardano transaction snapshot data. If it …\nCalls <code>U::from(self)</code>.\nFetch a list of signed Cardano transaction snapshots.\nConstructs a new <code>CardanoTransactionClient</code>.\nAggregator client for the Certificate\nAPI that defines how to validate certificates.\nImplementation of a CertificateVerifier that can send …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a single certificate full information from the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFetch a list of certificates\nConstructs a new <code>CertificateClient</code>.\nConstructs a new <code>MithrilCertificateVerifier</code>.\nValidate the chain starting with the given certificate.\nValidate the chain starting with the certificate with …\nHash of a Cardano Block\nBlockNumber is the block number of a Cardano transaction.\nThe epoch offset used to retrieve the epoch at the end of …\nA point in the Cardano chain at which a Mithril …\nThe ProtocolMessage part key associated to the epoch for …\nThe ProtocolMessage part key associated to the Cardano …\nThe ProtocolMessage part key associated to the Cardano …\nThe Cardano chain point which is used to identify a …\nCompression algorithm for the snapshot archive artifacts.\nEpoch represents a Cardano epoch\nGzip compression format\nImmutableFileNumber represents the id of immutable files …\nThe ProtocolMessage part key associated to the latest …\nThe epoch offset used to retrieve the signers stake …\nThe ProtocolMessage part key associated to the Next epoch …\nThe epoch offset used for aggregator protocol parameters …\nProtocolMessage represents a message that is signed (or …\nThe key of a ProtocolMessage\nProtocol cryptographic parameters\nThe epoch offset used for signers stake distribution and …\nThe epoch offset used for signers stake distribution and …\nThe epoch offset used to retrieve, given the epoch at …\nCardano Slot number\nThe ProtocolMessage part key associated to the Snapshot …\nStakeDistribution represents the stakes of multiple …\nTransactionHash is the unique identifier of a cardano …\nZstandard compression format\nThe hex encoded block hash\nThe block number\nComputes the hash of a CardanoDbBeacon\nComputes the hash of the protocol message\nComputes the hash of ProtocolParameters\nCreate a dummy ChainPoint\nValue used as a placeholder where a beacon is necessary\nCardano chain epoch number\nThose ratio will be multiplied by the snapshot size to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the message part associated with a key\nCheck if there is a gap with another Epoch.\nNumber of the last included immutable files for the digest …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if origin chain point\nQuorum parameter\nList all the available algorithms.\nSecurity parameter (number of lotteries)\nMap of the messages combined into the digest aka MSG(p,n)\nCardano network\nChainPoint factory\nCardanoDbBeacon factory\nProtocolMessage factory\nProtocolParameters factory\nComputes the next Epoch\nComputes a new Epoch by applying an epoch offset.\nApply the cardano stake distribution snapshot epoch offset …\nApply the next signer retrieval offset to this epoch\nApply the protocol parameters recording offset to this …\nApply the recording offset to this epoch\nApply the retrieval offset to this epoch\nApply the signer signing offset to this epoch\nCreate a new origin chain point\nf in phi(w) = 1 - (1 - f)^w, where w is the stake of a …\nphi_f_fixed is a fixed decimal representation of phi_f …\nComputes the previous Epoch\nSet the message part associated with a key Returns …\nThe slot number\nGet the extension associated to tar archive using the …\nThe whole certificate chain is valid.\nA certificate chain validation has started\nA individual certificate of a chain have been validated.\nA receiver of MithrilEvent.\nA sender of MithrilEvent.\nEvent that can be reported by a FeedbackReceiver.\nA FeedbackReceiver that writes the event it receives in a …\nA snapshot download has completed\nA snapshot download is in progress\nA snapshot download has started\nA FeedbackReceiver that stacks the events that it receives …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCallback called by a FeedbackSender when it needs to send …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new SlogFeedbackReceiver.\nCreate a new StackFeedbackReceiver.\nCreate a new FeedbackSender.\nGenerate a random unique identifier to identify a …\nGenerate a random unique identifier to identify a snapshot …\nSend the given event to the known receivers.\nReturns a copy of the stored stacked events.\nUnique identifier used to track this specific certificate …\nUnique identifier used to track this specific certificate …\nUnique identifier used to track this specific certificate …\nThe validated certificate hash\nDigest of the downloaded snapshot\nUnique identifier used to track this specific snapshot …\nUnique identifier used to track this specific snapshot …\nUnique identifier used to track this specific snapshot …\nNumber of bytes that have been downloaded\nSize of the downloaded archive\nSize of the downloaded archive\nHTTP client for MithrilStakeDistribution API from the …\nReturns the argument unchanged.\nGet the given stake distribution data. If it cannot be …\nCalls <code>U::from(self)</code>.\nFetch a list of signed MithrilStakeDistribution\nConstructs a new <code>MithrilStakeDistributionClient</code>.\nDownload location does not work\nAggregator client for the snapshot artifact\nError for the Snapshot client\nIncrements the aggregator snapshot download statistics\nDownload and unpack the given snapshot to the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the given snapshot data. If it cannot be found, a None …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a list of available snapshots\nConstructs a new <code>SnapshotClient</code>.\ngiven digest\nlist of locations tried\nA snapshot downloader that only handles download through …\nAPI that defines a snapshot downloader\nDownload and unpack a snapshot archive on the disk.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>HttpSnapshotDownloader</code>.\nTest if the given snapshot location exists.")