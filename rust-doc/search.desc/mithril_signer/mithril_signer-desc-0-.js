searchState.loadedDescShard("mithril_signer", 0, "Mithril Signer crate documentation\nClient configuration\nCritical error means the runtime will exit and the …\nDefault configuration with all the default values for …\nParse file error\nAdapter to convert EpochSettingsMessage to EpochSettings.\nAdapter to turn CertificatePendingMessage instances into …\nStarting state\nKeepState error means the runtime will keep its state and …\nCould not associate my node with a stake.\nCould not find the stake for one of the signers.\nValue was expected from a subsystem but None was returned.\n<code>Registered</code> state. The Signer has successfully registered …\nThis trait is mainly intended for mocking.\nThis type represents the errors thrown from the Runner.\nRuntimeError Error kinds tied to their faith in the state …\n<code>Signed</code> state. The Signer has signed the message for the …\nController methods for the Signer’s state machine.\nDifferent possible states of the state machine.\nThe state machine is responsible of the execution of the …\nAdapter to create RegisterSignerMessage from Signer …\nHold the latest known epoch in order to help …\nMethod to convert.\nAggregator endpoint\nIf set no error is returned in case of unparsable block …\nFrom a list of signers, associate them with the stake read …\nCreate era reader adapter from configuration settings.\nCheck if all prerequisites for signing are met.\nCardano CLI tool path\nPath of the socket used by the Cardano CLI tool to …\nThe maximum number of roll forwards during a poll of the …\nThe maximum number of roll forwards during a poll of the …\nCreate the message to be signed with the single signature.\nCreate the single signature.\nPerform a cycle of the state machine.\nDirectory to store signer data (Stakes, Protocol …\ndatabase module. This module contains the entities …\nDirectory to snapshot\nDependency injection module.\nDisable immutables digests cache.\nEnable metrics server (Prometheus endpoint on /metrics).\nIf set, the signer will prune the cardano transactions in …\nTransaction pruning toggle\nEra reader adapter parameters\nEra reader adapter type\nEra reader adapter type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch the current time point from the Cardano node.\nFetch the current epoch settings if any.\nReturn the CardanoNetwork value from the configuration.\nFetch the current pending certificate if any.\nCreate the SQL store directory if not exist and return the …\nReturn the current state of the state machine.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEasy matching Critical errors.\nReturns <code>true</code> if the state in <code>Init</code>\nReturns <code>true</code> if the state in <code>Registered</code>\nReturns <code>true</code> if the state in <code>Signed</code>\nReturns <code>true</code> if the state in <code>Unregistered</code>\nFile path to the KES secret key of the pool\nmetrics module. This module contains the signer metrics …\nMetrics HTTP Server IP.\nMetrics HTTP server IP.\nMetrics HTTP Server listening port.\nMetrics HTTP server listening port.\nCardano network\nCardano Network Magic number useful for TestNet &amp; DevNet\nAlso known as <code>k</code>, it defines the number of blocks that are …\nNetwork security parameter\nCreate a new Runner instance.\nCreate a new StateMachine instance.\nFile path to the operational certificate of the pool\nParty Id\nBlocks offset, from the tip of the chain, to exclude …\nPreload security parameter\nRegister the signer verification key to the aggregator.\nRelay endpoint\nIf set the existing immutables digests cache will be reset.\nLaunch the state machine until an error occurs or it is …\nRun Interval\nSend the single signature to the aggregator in order to be …\nServices\nAlternative storage backends when relational database …\nStore retention limit. If set to None, no limit will be …\nChunk size for importing transactions, combined with …\nChunk size for importing transactions\nAdapter method\nMethod to trigger the conversion.\nRead the current era and update the EraChecker.\nRead the stake distribution and store it.\nPerform the upkeep tasks.\nContext error message\nContext error message\nEventual previous error message\nEventual previous error message\nCurrent Epoch\nEpoch when Signer may sign.\nEpoch when Signer signed.\nEntity type that is signed\nMigration module\nSigner related database repositories\nGet all the migrations required by this version of the …\nThe <code>DependenciesBuilder</code> is intended to manage Services …\nThis structure groups all the dependencies required by the …\nAPI version provider\nBuild dependencies for the Production environment.\nBuild a SQLite connection.\nCardano transactions preloader\nCertificate handler service\nChain Observer service\nDigester service\nEra checker service\nEra reader service\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMetrics service\nCreate a new <code>DependenciesBuilder</code>.\nOverride default chain observer builder.\nOverride immutable file observer builder.\nProtocolInitializer store\nSignable Builder Service\nSigned entity type lock\nSingleSigner service\nStake store service\nTime point provider service\nUpkeep service\nThe MetricsServer is responsible for exposing the metrics …\nMetrics service which is responsible for recording and …\n‘runtime_cycle_success_since_startup’ metric help\n‘runtime_cycle_success_since_startup’ metric name\n‘runtime_cycle_total_since_startup’ metric help\n‘runtime_cycle_total_since_startup’ metric name\n‘signature_registration_success_last_epoch’ metric help\n‘signature_registration_success_last_epoch’ metric name\n‘signature_registration_success_since_startup’ metric …\n‘signature_registration_success_since_startup’ metric …\n‘signature_registration_total_since_startup’ metric …\n‘signature_registration_total_since_startup’ metric …\n‘signer_registration_success_last_epoch’ metric help\n‘signer_registration_success_last_epoch’ metric name\n‘signer_registration_success_since_startup’ metric help\n‘signer_registration_success_since_startup’ metric name\n‘signer_registration_total_since_startup’ metric help\n‘signer_registration_total_since_startup’ metric name\nMetrics server endpoint.\nExport the metrics as a string with the Open Metrics …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new MetricsServer instance.\nCreate a new <code>MetricsService</code> instance.\nGet the <code>runtime_cycle_success_since_startup</code> counter.\nIncrement the <code>runtime_cycle_success_since_startup</code> counter.\nGet the <code>runtime_cycle_total_since_startup</code> counter.\nIncrement the <code>runtime_cycle_total_since_startup</code> counter.\nGet the <code>signature_registration_success_last_epoch</code> gauge …\nSet the <code>signature_registration_success_last_epoch</code> gauge …\nGet the <code>signature_registration_success_since_startup</code> …\nIncrement the <code>signature_registration_success_since_startup</code> …\nGet the <code>signature_registration_total_since_startup</code> counter.\nIncrement the <code>signature_registration_total_since_startup</code> …\nGet the <code>signer_registration_success_last_epoch</code> gauge value.\nSet the <code>signer_registration_success_last_epoch</code> gauge value.\nGet the <code>signer_registration_success_since_startup</code> counter.\nIncrement the <code>signer_registration_success_since_startup</code> …\nGet the <code>signer_registration_total_since_startup</code> counter.\nIncrement the <code>signer_registration_total_since_startup</code> …\nServe the metrics on a HTTP server.\nAdapter error\nAvk computation Error\nTrait for mocking and testing a <code>AggregatorClient</code>\nError structure for the Aggregator Client.\nAggregatorHTTPClient is a http client for an aggregator\nIncompatible API version error\nImport and store CardanoTransaction.\nCardanoTransactionsPreloaderActivationSigner\nHTTP client creation error\nTrait to get the highest transaction block number\nMostly network errors.\nCould not parse response.\nThis is responsible of creating new instances of …\nImplementation of the SingleSigner.\nCryptographic Signer creation error.\nProxy creation error\nThe aggregator host responded it cannot fulfill our …\nThe aggregator host has returned a technical error.\nCould not reach aggregator.\nSignature Error\nImplementation of the upkeep service for the signer.\nThe SingleSigner is the structure responsible of issuing …\nSingleSigner error structure.\nCardano transactions pruner\nCardano transactions store\nA decorator of TransactionsImporter that does the import …\nA decorator of TransactionsImporter that prunes the …\nA decorator of TransactionsImporter that vacuums the …\nDefine the service responsible for the upkeep of the …\nCreate a ProtocolInitializer instance.\nCompute aggregate verification key from stake distribution\nCompute aggregate verification key from stake distribution\nComputes single signatures\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the highest known transaction block number\nGet the highest known transaction beacon\nGet the highest stored block range root bounds\nGet party id\nGet party id\nGet transactions in an interval of blocks\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAggregatorHTTPClient factory\nCreate a new instance of <code>TransactionsImporterByChunk</code>.\nCreate a new instance of TransactionsImporterWithPruner.\nCreate a new instance of TransactionsImporterWithVacuum.\nCreate a new instance of …\nCreate a new instance of the MithrilSingleSigner.\nCreate a new instance of the aggregator upkeep service.\nConstructor\nForge a client request adding protocol version in the …\nPrune the transactions older than the given number of …\nRegisters single signatures with the aggregator.\nRegisters signer with the aggregator.\nRemove transactions and block range roots that are in a …\nRetrieves aggregator features message from the aggregator\nRetrieves epoch settings from the aggregator\nRetrieves a pending certificate from the aggregator\nRun the upkeep service.\nStore list of block ranges with their corresponding merkle …\nStore list of transactions\nA Merkle tree store with Sqlite backend\nImplementation of the ProtocolInitializerStorer\nStore the ProtocolInitializer used for each Epoch. This is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the list of the N last saved protocol initializers …\nFetch a protocol initializer if any saved for the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new ProtocolInitializerStore.\nSave a protocol initializer for the given Epoch.")